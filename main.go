package main

import (
	"bufio"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"sort"
	"time"
)

type id = string

type pkg = string

type RawLine struct {
	Action  string    `json:"Action"`
	Package string    `json:"Package"`
	Test    string    `json:"Test"`
	Output  string    `json:"Output"`
	Time    time.Time `json:"Time"`
}

func (l *RawLine) isValid() bool {
	var time0 time.Time
	return l.Time.After(time0) && l.Test != "" && l.Package != "" && l.Action != ""
}

type test struct {
	pkg      pkg
	name     string
	started  time.Time
	duration time.Duration
	passed   bool
}

type stats struct {
	packageDurations map[pkg]time.Duration
	tests            map[id]*test
}

func (s *stats) testsSortedByDurationDescending() ([]*test, []time.Duration) {
	var ks []*test
	var vs []time.Duration
	for _, v := range s.tests {
		ks = append(ks, v)
		vs = append(vs, v.duration)
	}
	byDurationDesc := func(i, j int) bool {
		return vs[j] < vs[i]
	}
	sort.Slice(ks, byDurationDesc)
	sort.Slice(vs, byDurationDesc)
	return ks, vs

}

func (s *stats) packagesSortedByDurationDescending() ([]pkg, []time.Duration) {
	var ks []pkg
	var vs []time.Duration
	for k, v := range s.packageDurations {
		ks = append(ks, k)
		vs = append(vs, v)
	}
	byDurationDesc := func(i, j int) bool {
		return vs[j] < vs[i]
	}
	sort.Slice(ks, byDurationDesc)
	sort.Slice(vs, byDurationDesc)
	return ks, vs
}

func testId(pkg pkg, name string) id {
	return fmt.Sprintf("%s#%s", pkg, name)
}

func readFile(path string) ([]RawLine, error) {
	var lines []RawLine

	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	scanner := bufio.NewScanner(f)
	scanner.Split(bufio.ScanLines)

	var time0 time.Time

	for scanner.Scan() {
		line := scanner.Text()

		var rawLine RawLine
		err := json.Unmarshal([]byte(line), &rawLine)

		if err != nil {
			return nil, err
		}
		if rawLine.Time.After(time0) {
			lines = append(lines, rawLine)
		}
	}

	return lines, nil
}

func arrangeTests(lines []RawLine) map[id]*test {
	m := make(map[id]*test)
	for _, line := range lines {
		if !line.isValid() || line.Action != "run" {
			continue
		}
		t := &test{
			pkg:     line.Package,
			name:    line.Test,
			started: line.Time,
		}
		m[testId(line.Package, line.Test)] = t
	}
	for _, line := range lines {
		if !line.isValid() {
			continue
		}
		switch line.Action {
		case "pass":
			t := m[testId(line.Package, line.Test)]
			t.duration = line.Time.Sub(t.started)
			t.passed = true
		case "fail":
			fmt.Printf("Fail!\n")
			t := m[testId(line.Package, line.Test)]
			t.duration = line.Time.Sub(t.started)
			t.passed = false
		default:
			break
		}
	}
	return m
}

func summarizePackageTimings(tests map[id]*test) map[pkg]time.Duration {
	durs := make(map[pkg]time.Duration)
	for _, t := range tests {
		durs[t.pkg] = durs[t.pkg] + t.duration
	}
	return durs
}

func computeStatsData(files []string) *stats {
	stats := &stats{}
	var lines []RawLine
	for _, a := range files {
		moreLines, err := readFile(a)
		if err != nil {
			log.Fatal(err)
		}
		lines = append(lines, moreLines...)
	}
	stats.tests = arrangeTests(lines)
	stats.packageDurations = summarizePackageTimings(stats.tests)
	return stats
}

func main() {
	var statistic string
	flag.StringVar(&statistic, "statistic", "", "Statistic to compute: pkg-time|test-time")
	oldUsage := flag.Usage
	flag.Usage = func() {
		oldUsage()
		fmt.Printf("\nArguments: [file1.json file2.json ... fileN.json]\n\n")
		fmt.Printf("Parses files generated by `go test -json f.json` and computes test set statistics.\n")
	}
	flag.Parse()

	args := flag.Args()

	switch statistic {
	case "":
		fmt.Printf("The `-statistic` flag is required.\n\n")
		flag.Usage()
	case "pkg-time":
		stats := computeStatsData(args)
		pkgs, pkgDurs := stats.packagesSortedByDurationDescending()
		for i, pkg := range pkgs {
			fmt.Printf("%s\t%v\n", pkg, pkgDurs[i])
		}
		return
	case "test-time":
		stats := computeStatsData(args)
		tests, testDurs := stats.testsSortedByDurationDescending()
		for i, t := range tests {
			var status string
			if t.passed {
				status = "pass"
			} else {
				status = "fail"
			}
			fmt.Printf("%s\t%s\t%v\t%s\n", t.name, t.pkg, testDurs[i], status)
		}
		break
	default:
		fmt.Printf("The `-statistic` flag is must be one of `pkg-time`, `test-time`.\n\n")
		flag.Usage()
	}
}
